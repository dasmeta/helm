{{- if .Values.dockerAuth.enabled -}}
apiVersion: external-secrets.io/v1beta1
kind: ClusterExternalSecret
metadata:
  name: "{{ include "docker.auth.name" . }}"
spec:
  # instantiate the secrets in matched namespaces
  namespaceSelector:
    {{ toYaml .Values.dockerAuth.namespaceSelector | nindent 4 }}
  refreshTime: {{ .Values.dockerAuth.refreshTime }}
  externalSecretSpec:
    refreshInterval: {{ .Values.dockerAuth.refreshInterval }}
    secretStoreRef:
      name: "{{ include "docker.auth.name" . }}"
      kind: ClusterSecretStore
    target:
      name: "{{ include "docker.auth.name" . }}" # the name of secret to be created
      template:
        type: kubernetes.io/dockerconfigjson
        engineVersion: v2
        data:
          .dockerconfigjson: |
            {
              "auths": {
                {{- range $registry := .Values.dockerAuth.registries }}
                "{{ $registry.url }}": {
                  {{- if or ( and $registry.usernameKey $registry.passwordKey ) $registry.authKey }}
                  {{- if and $registry.usernameKey $registry.passwordKey }}
                  "username": "{{ "{{" }} .{{ $registry.usernameKey }} {{ "}}" }}",
                  "password": "{{ "{{" }} .{{ $registry.passwordKey }} {{ "}}" }}"
                  {{- else }}
                  "auth": "{{ "{{" }} .{{ $registry.authKey }} {{ "}}" }}"
                  {{- end }}
                  {{- else }}
                  {{ fail "Either registry (usernameKey and passwordKey) or authKey must be provided" }}
                  {{ end }}
                }
                {{- end }}
              }
            }
    data:
      {{- range $registry := .Values.dockerAuth.registries }}
      {{- range $key, $value := $registry }}
      {{- if and $value (ne $key "url")}}
      - secretKey: {{ $value }}
        remoteRef:
          key: {{ $.Values.dockerAuth.secretManagerSecretName }}
          property: {{ $value }}
      {{- end }}
      {{- end }}
      {{- end }}
{{- end -}}
