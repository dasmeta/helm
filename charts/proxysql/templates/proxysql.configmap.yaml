apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "base.fullname" . }}
data:
  proxysql.cnf: |
    admin_variables=
    {
      admin_credentials="{{ .Values.proxysql.admin.user }}:{{ .Values.proxysql.admin.password }}"
      stats_credentials="{{ .Values.proxysql.stats.user }}:{{ .Values.proxysql.stats.password }}"
      mysql_ifaces="0.0.0.0:{{ .Values.proxysql.admin.port }}"
      restapi_enabled=true
      web_enabled={{ .Values.proxysql.stats.webEnabled }}
      web_port={{ .Values.proxysql.stats.webPort }}
    }
    mysql_variables=
    {
      interfaces="{{- range $index, $port := .Values.proxysql.mysql.ports }}{{ printf "0.0.0.0:%s%s" ($port | toString) (ternary ";" "" (lt (add1 $index) (len $.Values.proxysql.mysql.ports))) }}{{ end }}"
      connect_timeout_server=1500
      connect_timeout_server_max=10000
      connection_max_age_ms={{ .Values.proxysql.mysql.connectionMaxAgeMS }}
      default_max_latency_ms=1500
      default_query_timeout=86400000
      long_query_time=5000
      max_allowed_packet=1073741824
      max_connections={{ .Values.proxysql.mysql.maxConnections }}
      ping_timeout_server=500
      query_cache_size_MB={{ .Values.proxysql.mysql.queyCacheSizeMB }}
      query_retries_on_failure={{ .Values.proxysql.mysql.queryRetriesOnFailure }}
      server_version="{{ .Values.proxysql.mysql.version }}"
      shun_on_failures=5
      shun_recovery_time_sec=9
      stacksize=1048576
      threads=4
      threshold_query_length=524288
      threshold_resultset_size=4194304
      wait_timeout={{ int .Values.proxysql.mysql.waitTimeout }}
      monitor_enabled={{ .Values.proxysql.monitor.enabled }}
      {{- if .Values.proxysql.monitor.enabled }}
      monitor_connect_interval={{ .Values.proxysql.monitor.connectInterval }}
      monitor_connect_timeout={{ .Values.proxysql.monitor.connectTimeout }}
      monitor_username="{{ required "monitor user name is required!" .Values.proxysql.monitor.user }}"
      monitor_password="{{ required "monitor password is required!" .Values.proxysql.monitor.password }}"
      monitor_ping_interval={{ .Values.proxysql.monitor.pingInterval }}
      monitor_ping_max_failures={{ .Values.proxysql.monitor.pingMaxFailures }}
      monitor_ping_timeout={{ .Values.proxysql.monitor.pingTimeout }}
      monitor_query_interval={{ .Values.proxysql.monitor.queryInterval }}
      monitor_query_timeout={{ .Values.proxysql.monitor.queryTimeout }}
      monitor_read_only_interval={{ .Values.proxysql.monitor.readOnlyInterval }}
      monitor_read_only_max_timeout_count={{ .Values.proxysql.monitor.readOnlyMaxTimeoutCount }}
      monitor_read_only_timeout={{ .Values.proxysql.monitor.readOnlyTimeout }}
      monitor_replication_lag_interval={{ .Values.proxysql.monitor.replicationLagInterval }}
      monitor_replication_lag_timeout={{ .Values.proxysql.monitor.replicationLagTimeout }}
      monitor_slave_lag_when_null={{ .Values.proxysql.monitor.slaveLagWhenNull }}
      monitor_threads_max={{ .Values.proxysql.monitor.threadsMax }}
      monitor_threads_min={{ .Values.proxysql.monitor.threadsMin }}
      monitor_threads_queue_maxsize={{ .Values.proxysql.monitor.threadsQueueMaxsize }}
      monitor_timer_cached={{ .Values.proxysql.monitor.timerCached }}
      monitor_writer_is_also_reader={{ .Values.proxysql.monitor.writerAsReader }}
      {{- end }}
    }
    {{- if .Values.proxysql.mysql.servers }}
    mysql_servers=
    (
      {{- $totalServers := (len .Values.proxysql.mysql.servers) -}}
      {{- range $index, $element := .Values.proxysql.mysql.servers }}
      {
        {{- if $element.hostgroup_id }}
        hostgroup_id={{ $element.hostgroup_id }}
        {{- else }}
        hostgroup_id={{- if or $element.is_writer (kindIs "invalid" $element.is_writer) }}{{ $.Values.proxysql.mysql.writerHostgroup }}{{- else }}{{ $.Values.proxysql.mysql.readerHostgroup }}{{- end }}
        {{- end }}
        hostname="{{ required "mysql server's hostname is required!" $element.hostname }}"
        port={{ $element.port | default 3306 }}
        weight={{ $element.weight | default 1000 }}
        compression={{ (int $element.compression) | default 0 }}
        max_connections={{ $element.max_connections | default 1000 }}
        max_replication_lag={{ $element.max_replication_lag | default 0 }}
        use_ssl={{ $element.use_ssl | default 0 }}
      }{{- if lt (add1 $index) $totalServers -}},{{- end -}}
      {{- end }}
    )
    {{- end }}
    {{- if .Values.proxysql.mysql.slave.enabled }}
    mysql_replication_hostgroups=
    (
      {
        writer_hostgroup={{ .Values.proxysql.mysql.writerHostgroup }}
        reader_hostgroup={{ .Values.proxysql.mysql.readerHostgroup }}
        check_type="{{ .Values.proxysql.mysql.slave.checkType }}"
      }
    )
    {{- end }}
    {{- if .Values.proxysql.mysql.users }}
    mysql_users=
    (
      {{- $totalUsers := (len .Values.proxysql.mysql.users) -}}
      {{- range $index, $element := .Values.proxysql.mysql.users }}
      {
        username="{{ required "mysql username is required!" $element.username }}"
        password="{{ required "mysql password is required!" $element.password }}"
        use_ssl={{ $element.use_ssl | default 0 }}
        default_hostgroup={{ ternary $.Values.proxysql.mysql.readerHostgroup $.Values.proxysql.mysql.writerHostgroup ($element.read_only | default false) }}
        transaction_persistent={{ ternary 1 $element.transaction_persistent (kindIs "invalid" $element.transaction_persistent) }}
        active={{ ternary 1 $element.active (kindIs "invalid" $element.active) }}
        max_connections={{ $element.max_connections | default 1000 }}
      }{{- if lt (add1 $index) $totalUsers -}},{{- end -}}
      {{- end }}
    )
    {{- end }}
    mysql_query_rules=
    (
      {{- $queryRules := list }}
      {{- if .Values.proxysql.mysql.readWriteSplit }}
        {{- $queryRules = append $queryRules (dict "active" 1 "match_digest" "^SELECT .* FOR UPDATE$" "destination_hostgroup" .Values.proxysql.mysql.writerHostgroup "apply" 1 ) }}
      {{- end }}
      {{- $queryRules = concat $queryRules .Values.proxysql.mysql.rules }}
      {{- if .Values.proxysql.mysql.readWriteSplit }}
        {{- $queryRules = append $queryRules (dict "active" 1 "match_digest" "^SELECT" "destination_hostgroup" .Values.proxysql.mysql.readerHostgroup "apply" 1 ) }}
      {{- end }}
      {{- $totalRules := (len $queryRules) }}
      {{- range $index, $element :=  $queryRules }}
      {
        rule_id={{ add1 $index }}
        active={{ ternary 1 $element.active (kindIs "invalid" $element.active) }}
        {{- if or $element.digest $element.match_digest $element.match_pattern }}
        {{- if $element.digest }}
        digest="{{ $element.digest }}"
        {{- end }}
        {{- if $element.match_digest }}
        {{- if $element.digest }}
        # match_digest="{{ $element.match_digest }}"
        {{- else }}
        match_digest="{{ $element.match_digest }}"
        {{- end }}
        {{- else }}
        match_pattern="{{ $element.match_pattern }}"
        {{- end }}
        {{- else }}
        {{ fail "Either digest, match_digest or match_pattern must be provided in query rules items" }}
        {{- end }}
        destination_hostgroup={{ $element.destination_hostgroup | default $.Values.proxysql.mysql.writerHostgroup }}
        {{- if $element.cache_ttl}}
        cache_ttl={{ $element.cache_ttl }}
        {{- end }}
        apply={{ ternary 1 $element.apply (kindIs "invalid" $element.apply) }}
        {{- if $element.proxy_port}}
        proxy_port={{ $element.proxy_port }}
        {{- end }}
      }{{- if lt (add1 $index) $totalRules -}},{{- end -}}
      {{- end }}
    )
