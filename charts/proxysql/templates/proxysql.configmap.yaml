apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "base.fullname" . }}
data:
  proxysql.cnf: |
    admin_variables=
    {
      admin_credentials="{{ .Values.proxysql.app.admin.user }}:{{ .Values.proxysql.app.admin.password }}"
      stats_credentials="{{ .Values.proxysql.app.stats.user }}:{{ .Values.proxysql.app.stats.password }}"
      mysql_ifaces="0.0.0.0:{{ .Values.proxysql.app.admin.port }}"
      restapi_enabled=true
      web_enabled={{ .Values.proxysql.app.stats.webEnabled }}
      web_port={{ .Values.proxysql.app.stats.webPort }}
    }
    mysql_variables=
    {
      {{- range $index, $value := .Values.proxysql.app.mysql }}
        {{- if not (has $index (list "ssl_p2s_ca" "ports" "monitor" )) }}
          {{- if kindIs "int" $value | or (kindIs "float64" $value) }}
      {{ $index }}={{ printf "%d" (int64 $value) }}
          {{- else if kindIs "string" $value }}
      {{ $index }}={{ $value | quote }}
          {{- else }}
      {{ $index }}={{ $value }}
          {{- end }}
        {{- end }}
      {{- end }}
      interfaces="{{- range $index, $port := .Values.proxysql.app.mysql.ports }}{{ printf "0.0.0.0:%s%s" ($port | toString) (ternary ";" "" (lt (add1 $index) (len $.Values.proxysql.app.mysql.ports))) }}{{ end }}"
      monitor_enabled={{ .Values.proxysql.app.mysql.monitor.enabled }}
      {{- if .Values.proxysql.app.mysql.monitor.enabled }}
      monitor_username="{{ required "monitor username is required!" .Values.proxysql.app.mysql.monitor.username }}"
      monitor_password="{{ required "monitor password is required!" .Values.proxysql.app.mysql.monitor.password }}"
      monitor_connect_interval={{ .Values.proxysql.app.mysql.monitor.connect_interval }}
      monitor_connect_timeout={{ .Values.proxysql.app.mysql.monitor.connect_timeout }}
      monitor_ping_interval={{ .Values.proxysql.app.mysql.monitor.ping_interval }}
      monitor_ping_max_failures={{ .Values.proxysql.app.mysql.monitor.ping_max_failures }}
      monitor_ping_timeout={{ .Values.proxysql.app.mysql.monitor.ping_timeout }}
      monitor_query_interval={{ .Values.proxysql.app.mysql.monitor.query_interval }}
      monitor_query_timeout={{ .Values.proxysql.app.mysql.monitor.query_timeout }}
      monitor_read_only_interval={{ .Values.proxysql.app.mysql.monitor.read_only_interval }}
      monitor_read_only_max_timeout_count={{ .Values.proxysql.app.mysql.monitor.read_only_max_timeout_count }}
      monitor_read_only_timeout={{ .Values.proxysql.app.mysql.monitor.read_only_timeout }}
      monitor_replication_lag_interval={{ .Values.proxysql.app.mysql.monitor.replication_lag_interval }}
      monitor_replication_lag_timeout={{ .Values.proxysql.app.mysql.monitor.replication_lag_timeout }}
      monitor_slave_lag_when_null={{ .Values.proxysql.app.mysql.monitor.slave_lag_when_null }}
      monitor_threads_max={{ .Values.proxysql.app.mysql.monitor.threads_max }}
      monitor_threads_min={{ .Values.proxysql.app.mysql.monitor.threads_min }}
      monitor_threads_queue_maxsize={{ .Values.proxysql.app.mysql.monitor.threads_queue_maxsize }}
      monitor_timer_cached={{ .Values.proxysql.app.mysql.monitor.timer_cached }}
      monitor_writer_is_also_reader={{ .Values.proxysql.app.mysql.monitor.writer_is_also_reader }}
      monitor_local_dns_cache_ttl={{.Values.proxysql.app.mysql.monitor.local_dns_cache_ttl }}
      monitor_local_dns_cache_refresh_interval={{.Values.proxysql.app.mysql.monitor.local_dns_cache_refresh_interval }}
      monitor_local_dns_resolver_queue_maxsize={{.Values.proxysql.app.mysql.monitor.local_dns_resolver_queue_maxsize }}
      {{- end }}
      {{- if .Values.proxysql.app.mysql.ssl_p2s_ca }}
      ssl_p2s_ca="/etc/proxysql/certs/ca-cert.pem"
      have_ssl=true
      {{- end }}
    }
    {{- if .Values.proxysql.app.servers }}
    mysql_servers=
    (
      {{- $totalServers := (len .Values.proxysql.app.servers) -}}
      {{- range $index, $element := .Values.proxysql.app.servers }}
      {
        {{- if $element.hostgroup_id }}
        hostgroup_id={{ $element.hostgroup_id }}
        {{- else }}
        hostgroup_id={{- if or $element.is_writer (kindIs "invalid" $element.is_writer) }}{{ $.Values.proxysql.app.writerHostgroup }}{{- else }}{{ $.Values.proxysql.app.readerHostgroup }}{{- end }}
        {{- end }}
        hostname="{{ required "mysql server's hostname is required!" $element.hostname }}"
        port={{ $element.port | default 3306 }}
        weight={{ $element.weight | default 1000 }}
        compression={{ (int $element.compression) | default 0 }}
        max_connections={{ $element.max_connections | default 1000 }}
        max_replication_lag={{ $element.max_replication_lag | default 0 }}
        use_ssl={{ $element.use_ssl | default 0 }}
        comment={{ $element.comment | default "" | quote }}
        status={{ $element.status | default "ONLINE" | quote }}
      }{{- if lt (add1 $index) $totalServers -}},{{- end -}}
      {{- end }}
    )
    {{- end }}
    {{- if .Values.proxysql.app.serverTypeCheck.enabled }}
    mysql_replication_hostgroups=
    (
      {
        writer_hostgroup={{ .Values.proxysql.app.writerHostgroup }}
        reader_hostgroup={{ .Values.proxysql.app.readerHostgroup }}
        check_type="{{ .Values.proxysql.app.serverTypeCheck.check_type }}"
      }
    )
    {{- end }}
    {{- if .Values.proxysql.app.awsAurora.enabled }}
    mysql_aws_aurora_hostgroups=
    (
      {
        writer_hostgroup={{ .Values.proxysql.app.writerHostgroup }}
        reader_hostgroup={{ .Values.proxysql.app.readerHostgroup }}
        active={{ .Values.proxysql.app.awsAurora.active }}
        aurora_port={{ .Values.proxysql.app.awsAurora.aurora_port }}
        domain_name="{{ .Values.proxysql.app.awsAurora.domain_name }}"
        max_lag_ms={{ .Values.proxysql.app.awsAurora.max_lag_ms }}
        check_interval_ms={{ .Values.proxysql.app.awsAurora.check_interval_ms }}
        check_timeout_ms={{ .Values.proxysql.app.awsAurora.check_timeout_ms }}
        writer_is_also_reader={{ .Values.proxysql.app.awsAurora.writer_is_also_reader }}
        new_reader_weight={{ .Values.proxysql.app.awsAurora.new_reader_weight }}
        add_lag_ms={{ .Values.proxysql.app.awsAurora.add_lag_ms }}
        min_lag_ms={{ .Values.proxysql.app.awsAurora.min_lag_ms }}
        lag_num_checks={{ .Values.proxysql.app.awsAurora.lag_num_checks }}
      }
    )
    {{- end }}
    {{- if .Values.proxysql.app.users }}
    mysql_users=
    (
      {{- $totalUsers := (len .Values.proxysql.app.users) -}}
      {{- range $index, $element := .Values.proxysql.app.users }}
      {
        username="{{ required "mysql username is required!" $element.username }}"
        password="{{ required "mysql password is required!" $element.password }}"
        use_ssl={{ $element.use_ssl | default 0 }}
        default_hostgroup={{ ternary $.Values.proxysql.app.readerHostgroup $.Values.proxysql.app.writerHostgroup ($element.read_only | default false) }}
        transaction_persistent={{ ternary 1 $element.transaction_persistent (kindIs "invalid" $element.transaction_persistent) }}
        active={{ ternary 1 $element.active (kindIs "invalid" $element.active) }}
        max_connections={{ $element.max_connections | default 1000 }}
      }{{- if lt (add1 $index) $totalUsers -}},{{- end -}}
      {{- end }}
    )
    {{- end }}
    mysql_query_rules=
    (
      {{- $queryRules := list }}
      {{- if .Values.proxysql.app.readWriteSplit }}
        {{- $queryRules = append $queryRules (dict "active" 1 "match_digest" "^SELECT .* FOR UPDATE$" "destination_hostgroup" .Values.proxysql.app.writerHostgroup "apply" 1 ) }}
      {{- end }}
      {{- $queryRules = concat $queryRules .Values.proxysql.app.rules }}
      {{- if .Values.proxysql.app.readWriteSplit }}
        {{- $queryRules = append $queryRules (dict "active" 1 "match_digest" "^SELECT" "destination_hostgroup" .Values.proxysql.app.readerHostgroup "apply" 1 ) }}
      {{- end }}
      {{- $totalRules := (len $queryRules) }}
      {{- range $index, $element :=  $queryRules }}
      {
        rule_id={{ add1 $index }}
        active={{ ternary 1 $element.active (kindIs "invalid" $element.active) }}
        {{- if or $element.digest $element.match_digest $element.match_pattern }}
        {{- if $element.digest }}
        digest="{{ $element.digest }}"
        {{- if $element.match_digest }}
        # match_digest="{{ $element.match_digest }}"
        {{- end }}
        {{- if $element.match_pattern }}
        # match_pattern="{{ $element.match_pattern }}"
        {{- end }}
        {{- else if $element.match_digest }}
        match_digest="{{ $element.match_digest }}"
        {{- else }}
        match_pattern="{{ $element.match_pattern }}"
        {{- end }}
        {{- else }}
        {{ fail "Either digest, match_digest or match_pattern must be provided in query rules items" }}
        {{- end }}
        destination_hostgroup={{ $element.destination_hostgroup | default $.Values.proxysql.app.writerHostgroup }}
        {{- if $element.cache_ttl}}
        cache_ttl={{ $element.cache_ttl }}
        {{- end }}
        apply={{ ternary 1 $element.apply (kindIs "invalid" $element.apply) }}
        {{- if $element.proxy_port}}
        proxy_port={{ $element.proxy_port }}
        {{- end }}
      }{{- if lt (add1 $index) $totalRules -}},{{- end -}}
      {{- end }}
    )
